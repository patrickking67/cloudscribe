CloudScribe {
  Program     = Statement+

  Statement   = VarDecl
              | FunDecl
              | Primary "++" ";"            --increment
              | Primary "--" ";"            --decrement
              | Primary "=" Exp ";"         --assign
              | Exp ";"                     --exp
              | break ";"                   --break
              | return Exp ";"              --return
              | return ";"                  --shortreturn
              | IfStmt
              | LoopStmt
              | TaskDecl

  VarDecl     = (let | const) id "=" Exp ";"
  FunDecl     = function id Params (":" Type)? Block
  TaskDecl    = task id Block
  Params      = "(" ListOf<Param, ","> ")"
  Param       = id ":" Type

  Type        = Type "?"                     --optional
              | "[" Type "]"                 --array
              | "(" ListOf<Type, ","> ")" "->" Type  --function
              | id                           --id

  IfStmt      = if Exp Block else Block      --long
              | if Exp Block                 --short
  LoopStmt    = for id "in" Exp Block        --collection
              | while Exp Block              --while
  Block       = "{" Statement* "}"

  Exp         = Exp1 "?" Exp1 ":" Exp        --conditional
              | Exp1
  Exp1        = Exp1 "??" Exp2               --unwrapelse
              | Exp2
  Exp2        = Exp2 "||" Exp3               --or
              | Exp3 
  Exp3        = Exp3 "&&" Exp4               --and
              | Exp4
  Exp4        = Exp4 ("|" Exp5)+             --bitor
              | Exp5
  Exp5        = Exp5 ("^" Exp6)+             --bitxor
              | Exp6
  Exp6        = Exp6 ("&" Exp7)+             --bitand
              | Exp7
  Exp7        = Exp7 ("<="|"<"|"=="|"!="|">="|">") Exp8  --compare
              | Exp8
  Exp8        = Exp8 ("+" | "-") Exp9        --add
              | Exp9
  Exp9        = Exp9 ("*"| "/" | "%") Exp10   --multiply
              | Exp10
  Exp10       = Exp10 "**" Exp11              --power
              | Exp11
  Exp11       = ("-" | "!" | some) Exp11     --unary
              | Primary
  Primary     = true ~mut
              | false ~mut
              | floatlit ~mut
              | intlit ~mut
              | Primary ("(" ListOf<Exp, ","> ")") ~mut  --call
              | Primary ("[" Exp "]")          --subscript
              | Primary ("." id)               --member
              | stringlit ~mut
              | id                            --id
              | "[" ListOf<Exp, ","> "]" ~mut --arrayexp
              | "(" Exp ")" ~mut              --parens

  intlit      = digit+
  floatlit    = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?
  stringlit   = "\"" char* "\""
  char        = ~control ~"\\" ~"\"" any
              | "\\" ("n" | "t" | "\"" | "\\") --escape
              | "\\u{" hex hex? hex? hex? hex? hex? "}" --codepoint
  control     = "\x00".."\x1f" | "\x80".."\x9f"
  hex         = hexDigit
  mut         = ~"==" "=" | "++" | "--"

  let         = "let" ~alnum
  const       = "const" ~alnum
  function    = "function" ~alnum
  task        = "task" ~alnum
  install     = "install" ~alnum
  update      = "update" ~alnum
  scan        = "scan" ~alnum
  restart     = "restart" ~alnum
  if          = "if" ~alnum
  else        = "else" ~alnum
  while       = "while" ~alnum
  for         = "for" ~alnum
  in          = "in" ~alnum
  break       = "break" ~alnum
  return      = "return" ~alnum
  some        = "some" ~alnum
  no          = "no" ~alnum
  true        = "true" ~alnum
  false       = "false" ~alnum
  keyword     = let | const | function | task | if | else | while | for | in | break | return | install | update | scan | restart | some | no | true | false
  id          = ~keyword letter alnum*

  space      += "//" (~"\n" any)*  --comment
}